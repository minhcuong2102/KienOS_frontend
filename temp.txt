import { lazy, Suspense } from "react";
import { Outlet, createBrowserRouter, Navigate } from "react-router-dom";
import PrivateRoute from "../components/PrivateRoute";
import PageLoader from "../components/loading/PageLoader";
import Splash from "../components/loading/Splash";
import { rootPaths } from "./paths";
import paths from "./paths";
import ServiceManagement from "../pages/admin/ServiceManagement";
import SaleContracts from "../components/sale/SaleContracts";
const App = lazy(() => import("../App"));

// Layouts
const AuthLayout = lazy(() => import("../layouts/auth-layout"));
const MainLayoutSale = lazy(() => import("../layouts/main-layout-sale"));
const MainLayoutAdmin = lazy(() => import("../layouts/main-layout-admin"));
const MainLayoutCoach = lazy(() => import("../layouts/main-layout"));

// Auth pages
const Login = lazy(() => import("../pages/auth/Login"));
const SignUp = lazy(() => import("../pages/auth/SignUp"));
const ForgotPassword = lazy(() => import("../pages/auth/ForgotPassword"));

// Error pages
const NotFound = lazy(() => import("../pages/error/NotFound"));
const Unauthorized = lazy(() => import("../pages/error/Unauthorized")); 


// Admin pages
const AccountManagement = lazy(() => import("../pages/admin/AccountManagement"));
const Statistic = lazy(() => import("../pages/admin/Statistic"));
const ServiceResponse = lazy(() => import("../pages/admin/ServiceResponse"));
const CoachManagement = lazy(() => import("../pages/admin/CoachManagement"));

// Coach pages
const UserProfile = lazy(() => import("../pages/coach/UserProfile"));
const ProductList = lazy(() => import("../pages/ProductList"));
const CoachDashboard = lazy(() => import("../pages/coach/CoachDashboard"));
const CoachSchedule = lazy(() => import("../pages/coach/CoachSchedule"));

// Sale pages
const SaleHomePage = lazy(() => import("../components/sale/SaleHomePage"));

// Other components
const PersistLogin = lazy(() => import("../components/PersistLogin"));
const Banned = lazy(() => import("../components/Banned"));

const createMainLayoutAdminRoutes = () => (
  <MainLayoutAdmin>
    <Suspense fallback={<PageLoader />}>
      <Outlet />
    </Suspense>
  </MainLayoutAdmin>
);

const createMainLayoutCoachRoutes = () => (
  <MainLayoutCoach>
    <Suspense fallback={<PageLoader />}>
      <Outlet />
    </Suspense>
  </MainLayoutCoach>
);

const createMainLayoutSaleRoutes = () => (
  <MainLayoutSale>
    <Suspense fallback={<PageLoader />}>
      <Outlet />
    </Suspense>
  </MainLayoutSale>
);

const createAuthLayoutRoutes = () => (
  <AuthLayout>
    <Suspense fallback={<PageLoader />}>
      <Outlet />
    </Suspense>
  </AuthLayout>
);

const routes = [
  {
    path: "/",
    element: (
      <Suspense fallback={<Splash />}>
        <App />
      </Suspense>
    ),
    children: [
      {
        index: true,
        element: <Navigate to="/auth/login" />,
      },
      {
        path: rootPaths.adminRoot,
        element: (
          <PersistLogin>
            {createMainLayoutAdminRoutes()}
          </PersistLogin>
        ),
        children: [
          {
            path: paths.accounts,
            element: (
              <PrivateRoute allowedRoles={['admin']}>
                <AccountManagement />
              </PrivateRoute>
            ),
          },
          {
            path: paths.services,
            element: (
              <PrivateRoute allowedRoles={["admin"]}>
                <ServiceManagement />
              </PrivateRoute>
            ),
          },
          {
            path: paths.statistics,
            element: (
              <PrivateRoute allowedRoles={["admin"]}>
                <Statistic />
              </PrivateRoute>
            ),
          },
          {
            path: paths.service_response,
            element: (
              <PrivateRoute allowedRoles={["admin"]}>
                <ServiceResponse />
              </PrivateRoute>
            ),
          },
          {
            path: paths.coachs,
            element: (
              <PrivateRoute allowedRoles={["admin"]}>
                <CoachManagement />
              </PrivateRoute>
            ),
          },
          
       
        ]
      },
      {
        path: rootPaths.coachRoot,
        element: <PersistLogin>{createMainLayoutCoachRoutes()}</PersistLogin>,
        children: [
          {
            path: paths.profile,
            element: (
              <PrivateRoute allowedRoles={["coach"]}>
                <UserProfile />
              </PrivateRoute>
            ),
          },
          {
            path: paths.product,
            element: (
              <PrivateRoute allowedRoles={["coach"]}>
                <ProductList />
              </PrivateRoute>
            ),
          },
          {
            path: paths.customer,
            element: (
              <PrivateRoute allowedRoles={["coach"]}>
                <CoachDashboard />
              </PrivateRoute>
            ),
          },
          {
            path: paths.schedule,
            element: (
              <PrivateRoute allowedRoles={["coach"]}>
                <CoachSchedule />
              </PrivateRoute>
            ),
          },
        ],
      },
      {
        path: rootPaths.saleRoot,
        element: <PersistLogin>{createMainLayoutSaleRoutes()}</PersistLogin>,
        children: [
          {
            path: paths.sale_home,
            element: <SaleHomePage />,
          },
          {
            path: paths.sale_contracts,
            element: <SaleContracts />,
          },
          {
            path: '*',
            element: <SaleHomePage />,
          },
        ],
      },
      {
        path: rootPaths.root,
        element: (
          <PrivateRoute allowedRoles={["coach"]}>
            <CoachSchedule />
          </PrivateRoute>
        ),
      },
    ],
  },
  {
    path: rootPaths.authRoot,
    element: createAuthLayoutRoutes(),
    children: [
      {
        path: paths.login,
        element: <Login />,
      },
      {
        path: paths.signup,
        element: <SignUp />,
      },
      {
        path: paths.forgot_password,
        element: <ForgotPassword />,
      },
    ],
  },
  {
    path: "*",
    element: <NotFound />,
  },
  {
    path: "/unauthorized",
    element: <Unauthorized />,
  },
  {
    path: "/banned",
    element: <Banned />,
  },
];

const options = {
  basename: "",
};

const router = createBrowserRouter(routes, options);

export default router;